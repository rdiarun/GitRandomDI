<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="kiandra" type="DetectorInspector.ApplicationConfig, DetectorInspector" />
    <section name="nhs-configuration" type="NHibernate.Search.Cfg.ConfigurationSectionHandler, NHibernate.Search" requirePermission="false" />
    <sectionGroup name="elmah">
      <section name="security" requirePermission="false" type="Elmah.SecuritySectionHandler, Elmah" />
      <section name="errorLog" requirePermission="false" type="Elmah.ErrorLogSectionHandler, Elmah" />
      <section name="errorMail" requirePermission="false" type="Elmah.ErrorMailSectionHandler, Elmah" />
      <section name="errorFilter" requirePermission="false" type="Elmah.ErrorFilterSectionHandler, Elmah" />
    </sectionGroup>
    <section name="syscache2" type="NHibernate.Caches.SysCache2.SysCacheSection, NHibernate.Caches.SysCache2" />
    <sectionGroup name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection, DotNetOpenAuth.Core">
      <section name="messaging" type="DotNetOpenAuth.Configuration.MessagingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
      <section name="reporting" type="DotNetOpenAuth.Configuration.ReportingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
      <section name="openid" type="DotNetOpenAuth.Configuration.OpenIdElement, DotNetOpenAuth.OpenId" requirePermission="false" allowLocation="true" />
      <section name="oauth" type="DotNetOpenAuth.Configuration.OAuthElement, DotNetOpenAuth.OAuth" requirePermission="false" allowLocation="true" />
    </sectionGroup>
  </configSections>
  <!-- NHibernate.Search -->
  <nhs-configuration xmlns="urn:nhs-configuration-1.0">
    <search-factory>
      <property name="hibernate.search.default.directory_provider">NHibernate.Search.Store.FSDirectoryProvider, NHibernate.Search</property>
      <property name="hibernate.search.default.indexBase">~/index/</property>
      <property name="hibernate.search.indexing_strategy">event</property>
    </search-factory>
  </nhs-configuration>
  <appSettings>
    <add key="Lucene.Net.lockdir" value="~/index/" />
    <add key="ClientValidationEnabled" value="false" />
    <add key="UnobtrusiveJavaScriptEnabled" value="false" />
    <add key="webpages:Version" value="2.0.0.0" />
    <add key="PreserveLoginUrl" value="true" />
    <add key="PreserveLoginUrl" value="true" />
  </appSettings>
  <kiandra mvcFileExtension="" systemBaseUrl="http://localhost/DetectorInspector" systemBasePath="C:\Users\Alex Ledda\GitHub\detectorinspector\DetectorInspector\"
           notificationSenderName="DetectorInspector [DEVELOPMENT]" notificationSenderEmail="detector.project@kiandra.com" maxFileUploadBytes="4194304" defaultStateId="7"
  environment="Dev" allowableUploadFileExtensions=".doc, .docx, .rtf, .txt, .pdf, .png, .jpg, .gif, .bmp" systemAccountId="10000000-0000-0000-0000-000000000000"
  importConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=&quot;Excel 12.0 Xml;HDR=YES;IMEX=1;&quot;" gstPercentage=".1" />
  <connectionStrings>
    <!--<add name="Default" connectionString="Data Source=172.24.1.44;Initial Catalog=rdi;User ID=rdi;Password=rdi" providerName="System.Data.SqlClient"/>
    <add name="Default1" connectionString="Data Source=172.24.1.44;Initial Catalog=rdi;User ID=rdi;Password=rdi" providerName="System.Data.SqlClient"/>-->
    <!--<add name="Default" connectionString="Data Source=172.24.0.24;Initial Catalog=rdi;User ID=rdi;Password=rdi;" providerName="System.Data.SqlClient"/>
    <add name="Default1" connectionString="Data Source=172.24.0.24;Initial Catalog=rdi;User ID=rdi;Password=rdi;" providerName="System.Data.SqlClient"/>-->
    <!--<add name="Default" connectionString="Data Source=50.23.221.50,1407;Initial Catalog=DetectorInspectorDemo;User ID=detector;Password=detector" providerName="System.Data.SqlClient"/>
    <add name="Default1" connectionString="Data Source=50.23.221.50,1407;Initial Catalog=DetectorInspectorDemo;User ID=detector;Password=detector" providerName="System.Data.SqlClient"/>
    <add name="Default1" connectionString="data source=172.24.1.44;Initial Catalog=rdi;User ID=rdi;Password=rdi;Integrated Security=SSPI;Connection Timeout=240;" providerName="System.Data.SqlClient" />
      <add name="Default" connectionString="data source=.\;Database=system.detectorinspector.com.au;Integrated Security=SSPI;Connection Timeout=120;" providerName="System.Data.SqlClient" /> -->
    <add name="Default" connectionString="Data Source=108.168.203.227,7007;Initial Catalog=randomdi;User ID=rdi;Password=rdi@2015;" providerName="System.Data.SqlClient"/>
    <add name="Default1" connectionString="Data Source=108.168.203.227,7007;Initial Catalog=randomdi;User ID=rdi;Password=rdi@2015;" providerName="System.Data.SqlClient"/>
  </connectionStrings>
  <syscache2>
    <cacheRegion name="ReferenceData">
      <!-- User maintainable reference data entities -->
      <dependencies>
        <tables>
        </tables>
      </dependencies>
    </cacheRegion>
    <cacheRegion name="Help">
      <dependencies>
        <tables>
          <!--<add name="Help" databaseEntryName="Default" tableName="Help" />-->
        </tables>
      </dependencies>
    </cacheRegion>
  </syscache2>
  <elmah>
    <security allowRemoteAccess="0" />
    <!-- Use to log errors to Microsoft SQL Server 2000 or 2005 using ASP.NET 2.0. Set value of connectionStringName attribute
            to the name of the connection string settings to use from the <connectionStrings> section. -->
    <!--<errorLog type="Elmah.SqlErrorLog, Elmah" connectionStringName="Default" />-->
    <!-- Use to send error reports by e-mail and adjust the attributes according to settings desired. Note that only the from and
            to attributes are required. The rest are optional and may be removed. If the SMTP server does not require authentication,
            you MUST remove the userName and password attributes or set them to empty values (resulting in zero-length strings).
            If you are using ELMAH compiled for .NET Framework 1.x, then the to attribute may contain multiple recipient addresses,
            each of which must be delimited by a semi-colon(;). If you are  using ELMAH compiled for .NET Framework 2.0 or later, then the
            to attribute may contain multiple recipient addresses, each of which must be delimited by a comma (,).-->
    <!-- <errorMail from="DetectorInspector Exceptions &lt;exceptions@kiandra.com&gt;" to="exceptions@kiandra.com" subject="DetectorInspector Exception Report" />-->
    <errorMail from="DetectorInspector Exceptions &lt;exceptions@kiandra.com&gt;" to="exceptions@kiandra.com" subject="DetectorInspector Exception Report [DEV]" />
    <!-- Use to prevent errors from being mailed or logged based on assertions/conditions provided under the <test> element.
            The example below will filter errors of type HttpException where the status code is 404 (in other words, where the
            resource was not found).
        <errorFilter>
            <test>
                <equal binding="HttpStatusCode" value="404" valueType="Int32" />
            </test>
        </errorFilter>
        -->
  </elmah>
  <!--<location path="elmah.axd">
		<system.web>
			<authorization>
				<allow roles="Site Administrator"/>
				<deny users="*" />
			</authorization>
		</system.web>
	</location>-->
  <system.web>
    <httpRuntime requestValidationMode="2.0" />
    <globalization culture="en-AU" uiCulture="en-AU" />
    <caching>
      <sqlCacheDependency enabled="true" pollTime="30000">
        <databases>
          <add name="Default" connectionStringName="Default" />
        </databases>
      </sqlCacheDependency>
    </caching>
    <!-- Set machine key -->
    <machineKey validationKey="73E0788CC018511985CCF26EAFE560F495A4CD1743464AFC854739EAFB285F8FA99FAB7D2E467F4FC80EADB2FE7384354D67A5B10F378E13626DBC60DE6AE3C8" decryptionKey="6C4E7E837C2FA07034A638EF13F1C45C2F1E6CD1BF7573DD" validation="SHA1" />
    <compilation debug="true" defaultLanguage="c#" targetFramework="4.0">
      <assemblies>
        <add assembly="System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
        <add assembly="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Data.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
        <add assembly="System.Web.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Helpers, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.WebPages, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      </assemblies>
    </compilation>
    <authentication mode="Forms">
      <!--<forms loginUrl="~/" protection ="All"  timeout="30" />-->
      <forms loginUrl="~/" protection ="All"  timeout="30" />
    </authentication>
    <sessionState timeout="30" mode="InProc" ></sessionState>
    <membership>
      <providers>
        <clear />
        <add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" connectionStringName="Default" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false" passwordFormat="Hashed" maxInvalidPasswordAttempts="5" minRequiredPasswordLength="8" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10" passwordStrengthRegularExpression="" applicationName="DetectorInspector" />
      </providers>
    </membership>
    <profile>
      <providers>
        <clear />
        <add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" connectionStringName="Default" applicationName="DetectorInspector" />
      </providers>
    </profile>
    <!-- rjc. commented out as this doesn't seem to work with MVC4 dotnet4.5
		<roleManager enabled="false">
			<providers>
				<clear />
			</providers>
		</roleManager>
		-->
    <customErrors mode="Off">
      <error statusCode="404" redirect="~/Home/NotImplemented" />
    </customErrors>
    <pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID">
      <namespaces>
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Routing" />
        <add namespace="Kiandra.Web.Mvc.Validation.Castle" />
        <add namespace="Kiandra.Web.Mvc.UI" />
        <add namespace="DetectorInspector.Infrastructure" />
        <add namespace="DetectorInspector.Model" />
        <add namespace="DetectorInspector.ViewModels" />
        <add namespace="System.Web.Helpers" />
        <add namespace="System.Web.WebPages" />
      </namespaces>
    </pages>
    <httpHandlers>
      <add verb="*" path="*.mvc" validate="false" type="System.Web.Mvc.MvcHttpHandler, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    </httpHandlers>
    <httpModules>
      <add name="AntiXssModule" type="Microsoft.Security.Application.SecurityRuntimeEngine.AntiXssModule" />
      <add name="NHibernateSessionPerRequestHttpModule" type="Kiandra.Web.Mvc.Data.NHibernateClient.SessionPerRequestHttpModule, Kiandra.Web.Mvc" />
      <add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" />
    </httpModules>
  </system.web>
  <system.net>
    <mailSettings>
      <smtp deliveryMethod="network" from="radolnik@detectorinspector.com.au">
        <network
					host="localhost"
					port="25"
					defaultCredentials="true"   			/>
      </smtp>
    </mailSettings>
    <defaultProxy enabled="true" />
    <settings>
      <!-- This setting causes .NET to check certificate revocation lists (CRL) 
					 before trusting HTTPS certificates.  But this setting tends to not 
					 be allowed in shared hosting environments. -->
      <!--<servicePointManager checkCertificateRevocationList="true"/>-->
    </settings>
  </system.net>
  <system.codedom>
    <compilers>
      <!--<compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" warningLevel="4"
								type="Microsoft.VisualBasic.VBCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
				<providerOption name="CompilerVersion" value="v3.5"/>
				<providerOption name="OptionInfer" value="true"/>
				<providerOption name="WarnAsError" value="false"/>
			</compiler>-->
    </compilers>
  </system.codedom>
  <system.web.extensions />
  <!-- 
				The system.webServer section is required for running ASP.NET AJAX under Internet
				Information Services 7.0.  It is not necessary for previous version of IIS.
	-->
  <system.webServer>
    <!--<urlCompression doDynamicCompression="false" />
		<httpCompression directory="%SystemDrive%\inetpub\temp\IIS Temporary Compressed Files">
			<scheme name="gzip" dll="%Windir%\system32\inetsrv\gzip.dll" />
			<staticTypes>
				<add mimeType="text/*" enabled="true" />
				<add mimeType="message/*" enabled="true" />
				<add mimeType="application/javascript" enabled="true" />
				<add mimeType="application/json;charset=utf-8" enabled="true" />
				<add mimeType="*/*" enabled="true" />
			</staticTypes>
			<dynamicTypes>
				<add mimeType="text/*" enabled="true" />
				<add mimeType="message/*" enabled="true" />
				<add mimeType="application/x-javascript" enabled="true" />
				<add mimeType="application/atom+xml" enabled="true" />
				<add mimeType="application/xml" enabled="true" />
				<add mimeType="application/atom+xml;charset=utf-8" enabled="true" />
				<add mimeType="application/json;charset=utf-8" enabled="true" />
				<add mimeType="multipart/mixed*" enabled="true" />
				<add mimeType="*/*" enabled="true" />
			</dynamicTypes>
		</httpCompression>-->
    <validation validateIntegratedModeConfiguration="false" />
    <modules runAllManagedModulesForAllRequests="true">
      <add name="NHibernateSessionPerRequestHttpModule" type="Kiandra.Web.Mvc.Data.NHibernateClient.SessionPerRequestHttpModule, Kiandra.Web.Mvc" />
      <add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" />
    </modules>
    <handlers>
      <remove name="MvcHttpHandler" />
      <remove name="UrlRoutingHandler" />
      <add name="MvcHttpHandler" preCondition="integratedMode" verb="*" path="*.mvc" type="System.Web.Mvc.MvcHttpHandler, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    </handlers>
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="NHibernate" publicKeyToken="aa95f207798dfdb4" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.1.2.4000" newVersion="2.1.2.4000" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Lucene.Net" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.9.1.2" newVersion="2.9.1.2" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0" newVersion="2.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="4.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0" newVersion="2.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
    <legacyHMACWarning enabled="0" />
  </runtime>
  <dotNetOpenAuth>
    <messaging>
      <untrustedWebRequest>
        <whitelistHosts>
          <!-- Uncomment to enable communication with localhost (should generally not activate in production!) -->
          <!--<add name="localhost" />-->
        </whitelistHosts>
      </untrustedWebRequest>
    </messaging>
    <!-- Allow DotNetOpenAuth to publish usage statistics to library authors to improve the library. -->
    <reporting enabled="true" />
    <openid>
      <relyingParty>
        <security requireSsl="false">
          <!-- Uncomment the trustedProviders tag if your relying party should only accept positive assertions from a closed set of OpenID Providers. -->
          <!--<trustedProviders rejectAssertionsFromUntrustedProviders="true">
						<add endpoint="https://www.google.com/accounts/o8/ud" />
					</trustedProviders>-->
        </security>
        <behaviors>
          <!-- The following OPTIONAL behavior allows RPs to use SREG only, but be compatible
							 with OPs that use Attribute Exchange (in various formats). -->
          <add type="DotNetOpenAuth.OpenId.RelyingParty.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth.OpenId.RelyingParty" />
        </behaviors>
      </relyingParty>
    </openid>
  </dotNetOpenAuth>
  <uri>
    <!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
				 which is necessary for OpenID urls with unicode characters in the domain/host name.
				 It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
    <idn enabled="All" />
    <iriParsing enabled="true" />
  </uri>
</configuration>